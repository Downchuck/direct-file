import { compNodeRegistry } from './registry';
import { AddFactory } from './Add';
import { AddressNodeFactory } from './AddressNode';
import { AllFactory } from './All';
import { AnyFactory } from './Any';
import { AsDecimalStringFactory } from './AsDecimalString';
import { AsStringFactory } from './AsString';
import { BankAccountNodeFactory } from './BankAccountNode';
import { BooleanNodeFactory } from './BooleanNode';
import { CollectionNodeFactory } from './CollectionNode';
import { CollectionSizeFactory } from './CollectionSize';
import { CollectionSumFactory } from './CollectionSum';
import { CountFactory } from './Count';
import { DayNodeFactory } from './DayNode';
import { DaysNodeFactory } from './DaysNode';
import { DependencyFactory } from './Dependency';
import { DivideFactory } from './Divide';
import { DollarNodeFactory } from './DollarNode';
import { EinNodeFactory } from './EinNode';
import { EmailAddressNodeFactory } from './EmailAddressNode';
import { EnumNodeFactory } from './EnumNode';
import { EnumOptionsContainsFactory } from './EnumOptionsContains';
import { EnumOptionsNodeFactory } from './EnumOptionsNode';
import { EnumOptionsSizeFactory } from './EnumOptionsSize';
import { EqualFactory } from './Equal';
import { FalseFactory } from './False';
import { FilterFactory } from './Filter';
import { FindFactory } from './Find';
import { FirstNCollectionItemsFactory } from './FirstNCollectionItems';
import { GreaterOfFactory } from './GreaterOf';
import { GreaterThanFactory } from './GreaterThan';
import { GreaterThanOrEqualFactory } from './GreaterThanOrEqual';
import { IndexOfFactory } from './IndexOf';
import { IntNodeFactory } from './IntNode';
import { IpPinNodeFactory } from './IpPinNode';
import { IsCompleteFactory } from './IsComplete';
import { LengthFactory } from './Length';
import { LessThanFactory } from './LessThan';
import { LessThanOrEqualFactory } from './LessThanOrEqual';
import { LesserOfFactory } from './LesserOf';
import { MaximumFactory } from './Maximum';
import { MinimumFactory } from './Minimum';
import { MultiEnumNodeFactory } from './MultiEnumNode';
import { MultiplyFactory } from './Multiply';
import { NotFactory } from './Not';
import { NotEqualFactory } from './NotEqual';
import { PasteFactory } from './Paste';
import { PhoneNumberNodeFactory } from './PhoneNumberNode';
import { PinNodeFactory } from './PinNode';
import { RationalNodeFactory } from './RationalNode';
import { RegexFactory } from './Regex';
import { RootNodeFactory } from './RootNode';
import { RoundFactory } from './Round';
import { RoundToIntFactory } from './RoundToInt';
import { StepwiseMultiplyFactory } from './StepwiseMultiply';
import { StringNodeFactory } from './StringNode';
import { SubtractFactory } from './Subtract';
import { SwitchFactory } from './Switch';
import { TinNodeFactory } from './TinNode';
import { TodayNodeFactory } from './TodayNode';
import { TrueFactory } from './True';
import { ZipCodeNodeFactory } from './ZipCodeNode';

compNodeRegistry.register(new AddFactory());
compNodeRegistry.register(new AddressNodeFactory());
compNodeRegistry.register(new AllFactory());
compNodeRegistry.register(new AnyFactory());
compNodeRegistry.register(new AsDecimalStringFactory());
compNodeRegistry.register(new AsStringFactory());
compNodeRegistry.register(new BankAccountNodeFactory());
compNodeRegistry.register(new BooleanNodeFactory());
compNodeRegistry.register(new CollectionNodeFactory());
compNodeRegistry.register(new CollectionSizeFactory());
compNodeRegistry.register(new CollectionSumFactory());
compNodeRegistry.register(new CountFactory());
compNodeRegistry.register(new DayNodeFactory());
compNodeRegistry.register(new DaysNodeFactory());
compNodeRegistry.register(new DependencyFactory());
compNodeRegistry.register(new DivideFactory());
compNodeRegistry.register(new DollarNodeFactory());
compNodeRegistry.register(new EinNodeFactory());
compNodeRegistry.register(new EmailAddressNodeFactory());
compNodeRegistry.register(new EnumNodeFactory());
compNodeRegistry.register(new EnumOptionsContainsFactory());
compNodeRegistry.register(new EnumOptionsNodeFactory());
compNodeRegistry.register(new EnumOptionsSizeFactory());
compNodeRegistry.register(new EqualFactory());
compNodeRegistry.register(new FalseFactory());
compNodeRegistry.register(new FilterFactory());
compNodeRegistry.register(new FindFactory());
compNodeRegistry.register(new FirstNCollectionItemsFactory());
compNodeRegistry.register(new GreaterOfFactory());
compNodeRegistry.register(new GreaterThanFactory());
compNodeRegistry.register(new GreaterThanOrEqualFactory());
compNodeRegistry.register(new IndexOfFactory());
compNodeRegistry.register(new IntNodeFactory());
compNodeRegistry.register(new IpPinNodeFactory());
compNodeRegistry.register(new IsCompleteFactory());
compNodeRegistry.register(new LengthFactory());
compNodeRegistry.register(new LessThanFactory());
compNodeRegistry.register(new LessThanOrEqualFactory());
compNodeRegistry.register(new LesserOfFactory());
compNodeRegistry.register(new MaximumFactory());
compNodeRegistry.register(new MinimumFactory());
compNodeRegistry.register(new MultiEnumNodeFactory());
compNodeRegistry.register(new MultiplyFactory());
compNodeRegistry.register(new NotFactory());
compNodeRegistry.register(new NotEqualFactory());
compNodeRegistry.register(new PasteFactory());
compNodeRegistry.register(new PhoneNumberNodeFactory());
compNodeRegistry.register(new PinNodeFactory());
compNodeRegistry.register(new RationalNodeFactory());
compNodeRegistry.register(new RegexFactory());
compNodeRegistry.register(new RootNodeFactory());
compNodeRegistry.register(new RoundFactory());
compNodeRegistry.register(new RoundToIntFactory());
compNodeRegistry.register(new StepwiseMultiplyFactory());
compNodeRegistry.register(new StringNodeFactory());
compNodeRegistry.register(new SubtractFactory());
compNodeRegistry.register(new SwitchFactory());
compNodeRegistry.register(new TinNodeFactory());
compNodeRegistry.register(new TodayNodeFactory());
compNodeRegistry.register(new TrueFactory());
compNodeRegistry.register(new ZipCodeNodeFactory());

export * from './CompNode';
