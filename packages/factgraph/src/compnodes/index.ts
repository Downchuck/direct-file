import { compNodeRegistry } from './registry';
import { AddFactory } from './Add';
import { AddressNodeFactory } from './AddressNode';
import { AllFactory } from './All';
import { AnyFactory } from './Any';
import { AsDecimalStringFactory } from './AsDecimalString';
import { AsStringFactory } from './AsString';
import { BankAccountNodeFactory } from './BankAccountNode';
import { BooleanNodeFactory } from './BooleanNode';
import { CollectionNodeFactory } from './CollectionNode';
import { CollectionSizeFactory } from './CollectionSize';
import { CollectionSumFactory } from './CollectionSum';
import { CountFactory } from './Count';
import { DayNodeFactory } from './DayNode';
import { DaysNodeFactory } from './DaysNode';
import { DependencyFactory } from './Dependency';
import { DivideFactory } from './Divide';
import { DollarNodeFactory } from './DollarNode';
import { EinNodeFactory } from './EinNode';
import { EmailAddressNodeFactory } from './EmailAddressNode';
import { EnumNodeFactory } from './EnumNode';
import { EnumOptionsContainsFactory } from './EnumOptionsContains';
import { EnumOptionsNodeFactory } from './EnumOptionsNode';
import { EnumOptionsSizeFactory } from './EnumOptionsSize';
import { EqualFactory } from './Equal';
import { FalseFactory } from './False';
import { FilterFactory } from './Filter';
import { FindFactory } from './Find';
import { FirstNCollectionItemsFactory } from './FirstNCollectionItems';
import { GreaterOfFactory } from './GreaterOf';
import { GreaterThanFactory } from './GreaterThan';
import { GreaterThanOrEqualFactory } from './GreaterThanOrEqual';
import { IndexOfFactory } from './IndexOf';
import { IntNodeFactory } from './IntNode';
import { IpPinNodeFactory } from './IpPinNode';
import { IsCompleteFactory } from './IsComplete';
import { LengthFactory } from './Length';
import { LessThanFactory } from './LessThan';
import { LessThanOrEqualFactory } from './LessThanOrEqual';
import { LesserOfFactory } from './LesserOf';
import { MaximumFactory } from './Maximum';
import { MinimumFactory } from './Minimum';
import { MultiEnumNodeFactory } from './MultiEnumNode';
import { MultiplyFactory } from './Multiply';
import { NotFactory } from './Not';
import { NotEqualFactory } from './NotEqual';
import { PasteFactory } from './Paste';
import { PhoneNumberNodeFactory } from './PhoneNumberNode';
import { PinNodeFactory } from './PinNode';
import { RationalNodeFactory } from './RationalNode';
import { RegexFactory } from './Regex';
import { RootNodeFactory } from './RootNode';
import { RoundFactory } from './Round';
import { RoundToIntFactory } from './RoundToInt';
import { StepwiseMultiplyFactory } from './StepwiseMultiply';
import { StringNodeFactory } from './StringNode';
import { SubtractFactory } from './Subtract';
import { SwitchFactory } from './Switch';
import { TinNodeFactory } from './TinNode';
import { TodayNodeFactory } from './TodayNode';
import { TrueFactory } from './True';
import { ZipCodeNodeFactory } from './ZipCodeNode';

compNodeRegistry.register(AddFactory);
compNodeRegistry.register(AddressNodeFactory);
compNodeRegistry.register(AllFactory);
compNodeRegistry.register(AnyFactory);
compNodeRegistry.register(AsDecimalStringFactory);
compNodeRegistry.register(AsStringFactory);
compNodeRegistry.register(BankAccountNodeFactory);
compNodeRegistry.register(BooleanNodeFactory);
compNodeRegistry.register(CollectionNodeFactory);
compNodeRegistry.register(CollectionSizeFactory);
compNodeRegistry.register(CollectionSumFactory);
compNodeRegistry.register(CountFactory);
compNodeRegistry.register(DayNodeFactory);
compNodeRegistry.register(DaysNodeFactory);
compNodeRegistry.register(DependencyFactory);
compNodeRegistry.register(DivideFactory);
compNodeRegistry.register(DollarNodeFactory);
compNodeRegistry.register(EinNodeFactory);
compNodeRegistry.register(EmailAddressNodeFactory);
compNodeRegistry.register(EnumNodeFactory);
compNodeRegistry.register(EnumOptionsContainsFactory);
compNodeRegistry.register(EnumOptionsNodeFactory);
compNodeRegistry.register(EnumOptionsSizeFactory);
compNodeRegistry.register(EqualFactory);
compNodeRegistry.register(FalseFactory);
compNodeRegistry.register(FilterFactory);
compNodeRegistry.register(FindFactory);
compNodeRegistry.register(FirstNCollectionItemsFactory);
compNodeRegistry.register(GreaterOfFactory);
compNodeRegistry.register(GreaterThanFactory);
compNodeRegistry.register(GreaterThanOrEqualFactory);
compNodeRegistry.register(IndexOfFactory);
compNodeRegistry.register(IntNodeFactory);
compNodeRegistry.register(IpPinNodeFactory);
compNodeRegistry.register(IsCompleteFactory);
compNodeRegistry.register(LengthFactory);
compNodeRegistry.register(LessThanFactory);
compNodeRegistry.register(LessThanOrEqualFactory);
compNodeRegistry.register(LesserOfFactory);
compNodeRegistry.register(MaximumFactory);
compNodeRegistry.register(MinimumFactory);
compNodeRegistry.register(MultiEnumNodeFactory);
compNodeRegistry.register(MultiplyFactory);
compNodeRegistry.register(NotFactory);
compNodeRegistry.register(NotEqualFactory);
compNodeRegistry.register(PasteFactory);
compNodeRegistry.register(PhoneNumberNodeFactory);
compNodeRegistry.register(PinNodeFactory);
compNodeRegistry.register(RationalNodeFactory);
compNodeRegistry.register(RegexFactory);
compNodeRegistry.register(RootNodeFactory);
compNodeRegistry.register(RoundFactory);
compNodeRegistry.register(RoundToIntFactory);
compNodeRegistry.register(StepwiseMultiplyFactory);
compNodeRegistry.register(StringNodeFactory);
compNodeRegistry.register(SubtractFactory);
compNodeRegistry.register(SwitchFactory);
compNodeRegistry.register(TinNodeFactory);
compNodeRegistry.register(TodayNodeFactory);
compNodeRegistry.register(TrueFactory);
compNodeRegistry.register(ZipCodeNodeFactory);

export * from './CompNode';
export * from './Add';
export * from './AddressNode';
export * from './All';
export * from './Any';
export * from './AsDecimalString';
export * from './AsString';
export * from './BankAccountNode';
export * from './BooleanNode';
export * from './CollectionNode';
export * from './CollectionSize';
export * from './CollectionSum';
export * from './Count';
export * from './DayNode';
export * from './DaysNode';
export * from './Dependency';
export * from './Divide';
export * from './DollarNode';
export * from './EinNode';
export * from './EmailAddressNode';
export * from './EnumNode';
export * from './EnumOptionsContains';
export * from './EnumOptionsNode';
export * from './EnumOptionsSize';
export * from './Equal';
export * from './False';
export * from './Filter';
export * from './Find';
export * from './FirstNCollectionItems';
export * from './GreaterOf';
export * from './GreaterThan';
export * from './GreaterThanOrEqual';
export * from './IndexOf';
export * from './IntNode';
export * from './IpPinNode';
export * from './IsComplete';
export * from './Length';
export * from './LessThan';
export * from './LessThanOrEqual';
export * from './LesserOf';
export * from './Maximum';
export * from './Minimum';
export * from './MultiEnumNode';
export * from './Multiply';
export * from './Not';
export * from './NotEqual';
export * from './Paste';
export * from './PhoneNumberNode';
export * from './PinNode';
export * from './RationalNode';
export * from './Regex';
export * from './RootNode';
export * from './Round';
export * from './RoundToInt';
export * from './StepwiseMultiply';
export * from './StringNode';
export * from './Subtract';
export * from './Switch';
export * from './TinNode';
export * from './TodayNode';
export * from './True';
export * from './ZipCodeNode';
