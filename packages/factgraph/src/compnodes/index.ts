import { compNodeRegistry } from './registry';
import { AddFactory } from './Add';
import { AddressNodeFactory } from './AddressNode';
import { AllFactory } from './All';
import { AnyFactory } from './Any';
import { AsDecimalStringFactory } from './AsDecimalString';
import { AsStringFactory } from './AsString';
import { BankAccountNodeFactory } from './BankAccountNode';
import { BooleanNodeFactory } from './BooleanNode';
import { CollectionNodeFactory } from './CollectionNode';
import { CollectionSizeFactory } from './CollectionSize';
import { CollectionSumFactory } from './CollectionSum';
import { CountFactory } from './Count';
import { DayNodeFactory } from './DayNode';
import { DaysNodeFactory } from './DaysNode';
import { DependencyFactory } from './Dependency';
import { DivideFactory } from './Divide';
import { DollarNodeFactory } from './DollarNode';
import { EinNodeFactory } from './EinNode';
import { EmailAddressNodeFactory } from './EmailAddressNode';
import { EnumNodeFactory } from './EnumNode';
import { EnumOptionsContainsFactory } from './EnumOptionsContains';
import { EnumOptionsNodeFactory } from './EnumOptionsNode';
import { EnumOptionsSizeFactory } from './EnumOptionsSize';
import { EqualFactory } from './Equal';
import { FalseFactory } from './False';
import { FilterFactory } from './Filter';
import { FindFactory } from './Find';
import { FirstNCollectionItemsFactory } from './FirstNCollectionItems';
import { GreaterOfFactory } from './GreaterOf';
import { GreaterThanFactory } from './GreaterThan';
import { GreaterThanOrEqualFactory } from './GreaterThanOrEqual';
import { IndexOfFactory } from './IndexOf';
import { IntNodeFactory } from './IntNode';
import { IpPinNodeFactory } from './IpPinNode';
import { IsCompleteFactory } from './IsComplete';
import { LengthFactory } from './Length';
import { LessThanFactory } from './LessThan';
import { LessThanOrEqualFactory } from './LessThanOrEqual';
import { LesserOfFactory } from './LesserOf';
import { MaximumFactory } from './Maximum';
import { MinimumFactory } from './Minimum';
import { MultiEnumNodeFactory } from './MultiEnumNode';
import { MultiplyFactory } from './Multiply';
import { NotFactory } from './Not';
import { NotEqualFactory } from './NotEqual';
import { PasteFactory } from './Paste';
import { PhoneNumberNodeFactory } from './PhoneNumberNode';
import { PinNodeFactory } from './PinNode';
import { RationalNodeFactory } from './RationalNode';
import { RegexFactory } from './Regex';
import { RootNodeFactory } from './RootNode';
import { RoundFactory } from './Round';
import { RoundToIntFactory } from './RoundToInt';
import { StepwiseMultiplyFactory } from './StepwiseMultiply';
import { StringNodeFactory } from './StringNode';
import { SubtractFactory } from './Subtract';
import { SwitchFactory } from './Switch';
import { TinNodeFactory } from './TinNode';
import { TodayNodeFactory } from './TodayNode';
import { TrueFactory } from './True';
import { ZipCodeNodeFactory } from './ZipCodeNode';

compNodeRegistry.register('Add', AddFactory);
compNodeRegistry.register('Address', AddressNodeFactory);
compNodeRegistry.register('All', AllFactory);
compNodeRegistry.register('Any', AnyFactory);
compNodeRegistry.register('AsDecimalString', AsDecimalStringFactory);
compNodeRegistry.register('AsString', AsStringFactory);
compNodeRegistry.register('BankAccount', BankAccountNodeFactory);
compNodeRegistry.register('Boolean', BooleanNodeFactory);
compNodeRegistry.register('Collection', CollectionNodeFactory);
compNodeRegistry.register('CollectionSize', CollectionSizeFactory);
compNodeRegistry.register('CollectionSum', CollectionSumFactory);
compNodeRegistry.register('Count', CountFactory);
compNodeRegistry.register('Day', DayNodeFactory);
compNodeRegistry.register('Days', DaysNodeFactory);
compNodeRegistry.register('Dependency', DependencyFactory);
compNodeRegistry.register('Divide', DivideFactory);
compNodeRegistry.register('Dollar', DollarNodeFactory);
compNodeRegistry.register('Ein', EinNodeFactory);
compNodeRegistry.register('EmailAddress', EmailAddressNodeFactory);
compNodeRegistry.register('Enum', EnumNodeFactory);
compNodeRegistry.register('EnumOptionsContains', EnumOptionsContainsFactory);
compNodeRegistry.register('EnumOptions', EnumOptionsNodeFactory);
compNodeRegistry.register('EnumOptionsSize', EnumOptionsSizeFactory);
compNodeRegistry.register('Equal', EqualFactory);
compNodeRegistry.register('False', FalseFactory);
compNodeRegistry.register('Filter', FilterFactory);
compNodeRegistry.register('Find', FindFactory);
compNodeRegistry.register('FirstNCollectionItems', FirstNCollectionItemsFactory);
compNodeRegistry.register('GreaterOf', GreaterOfFactory);
compNodeRegistry.register('GreaterThan', GreaterThanFactory);
compNodeRegistry.register('GreaterThanOrEqual', GreaterThanOrEqualFactory);
compNodeRegistry.register('IndexOf', IndexOfFactory);
compNodeRegistry.register('Int', IntNodeFactory);
compNodeRegistry.register('IpPin', IpPinNodeFactory);
compNodeRegistry.register('IsComplete', IsCompleteFactory);
compNodeRegistry.register('Length', LengthFactory);
compNodeRegistry.register('LessThan', LessThanFactory);
compNodeRegistry.register('LessThanOrEqual', LessThanOrEqualFactory);
compNodeRegistry.register('LesserOf', LesserOfFactory);
compNodeRegistry.register('Maximum', MaximumFactory);
compNodeRegistry.register('Minimum', MinimumFactory);
compNodeRegistry.register('MultiEnum', MultiEnumNodeFactory);
compNodeRegistry.register('Multiply', MultiplyFactory);
compNodeRegistry.register('Not', NotFactory);
compNodeRegistry.register('NotEqual', NotEqualFactory);
compNodeRegistry.register('Paste', PasteFactory);
compNodeRegistry.register('PhoneNumber', PhoneNumberNodeFactory);
compNodeRegistry.register('Pin', PinNodeFactory);
compNodeRegistry.register('Rational', RationalNodeFactory);
compNodeRegistry.register('Regex', RegexFactory);
compNodeRegistry.register('Root', RootNodeFactory);
compNodeRegistry.register('Round', RoundFactory);
compNodeRegistry.register('RoundToInt', RoundToIntFactory);
compNodeRegistry.register('StepwiseMultiply', StepwiseMultiplyFactory);
compNodeRegistry.register('String', StringNodeFactory);
compNodeRegistry.register('Subtract', SubtractFactory);
compNodeRegistry.register('Switch', SwitchFactory);
compNodeRegistry.register('TIN', TinNodeFactory);
compNodeRegistry.register('Today', TodayNodeFactory);
compNodeRegistry.register('True', TrueFactory);
compNodeRegistry.register('ZipCode', ZipCodeNodeFactory);

export * from './CompNode';
export * from './Add';
export * from './AddressNode';
export * from './All';
export * from './Any';
export * from './AsDecimalString';
export * from './AsString';
export * from './BankAccountNode';
export * from './BooleanNode';
export * from './CollectionNode';
export * from './CollectionSize';
export * from './CollectionSum';
export * from './Count';
export * from './DayNode';
export * from './DaysNode';
export * from './Dependency';
export * from './Divide';
export * from './DollarNode';
export * from './EinNode';
export * from './EmailAddressNode';
export * from './EnumNode';
export * from './EnumOptionsContains';
export * from './EnumOptionsNode';
export * from './EnumOptionsSize';
export * from './Equal';
export * from './False';
export * from './Filter';
export * from './Find';
export * from './FirstNCollectionItems';
export * from './GreaterOf';
export * from './GreaterThan';
export * from './GreaterThanOrEqual';
export * from './IndexOf';
export * from './IntNode';
export * from './IpPinNode';
export * from './IsComplete';
export * from './Length';
export * from './LessThan';
export * from './LessThanOrEqual';
export * from './LesserOf';
export * from './Maximum';
export * from './Minimum';
export * from './MultiEnumNode';
export * from './Multiply';
export * from './Not';
export * from './NotEqual';
export * from './Paste';
export * from './PhoneNumberNode';
export * from './PinNode';
export * from './RationalNode';
export * from './Regex';
export * from './RootNode';
export * from './Round';
export * from './RoundToInt';
export * from './StepwiseMultiply';
export * from './StringNode';
export * from './Subtract';
export * from './Switch';
export * from './TinNode';
export * from './TodayNode';
export * from './True';
export * from './ZipCodeNode';
